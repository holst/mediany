{
  "name": "Mediany",
  "tagline": "Mediany",
  "body": "Mediany is a dependency-free library for JavaScript event listening with the same principles as underlies responsive web design: Declarative behaviour at different media query breakpoints.\r\n\r\n## Philosophy\r\n\r\nEthan Marcotte revolutionised the way websites were developed when in 2010 he published the article '[Response Web Design](http://alistapart.com/article/responsive-web-design)' on A List Apart. Instead of making dedicated mobile and desktop websites, one should adapt the CSS (let it 'respond') to the dimensions and capabilities of the user agent's viewport using media queries.\r\n\r\nMediany tries to apply those same principles to JavaScript: Adding and removing event listeners based on the viewport's specifications. If the user resizes their window, the rules are re-applied according to the new media query.\r\n\r\n## Installation\r\n\r\nYou can get it from npm:\r\n\r\n    npm install mediany\r\n\r\nOr you can download the [compressed version][compressed].\r\n\r\n[compressed]: http://mediany.holst.io/latest.min.js\r\n\r\n## No polyfills\r\n\r\nMediany has no dependencies, but it does depend on some browser APIs:\r\n\r\n* `addEventListener` and `removeEventListener`\r\n* `Array.prototype.forEach`\r\n* `document.querySelectorAll`\r\n* `window.matchMedia`\r\n\r\n**No polyfills are supplied**. All of the above are feature detected, so if you otherwise follow progressive enhancement ideals, you should be fine if the user's browser doesn't support one or more of these, but be advised. You are of course welcome to supply polyfills of your own.\r\n\r\n## Usage\r\n\r\nMediany declares a very simple API: a function named `mediany`, which takes a `mediaQuery` parameter. Then an object is returned with a single method: `handle`. It takes three parameters: `selector`, `event` and `callback`.\r\n\r\nTo apply a special click handler for links on TVs you can use:\r\n\r\n    mediany('tv').handle('a', 'click', function (event) {\r\n        /* Handling here */\r\n    });\r\n\r\nYou can chain calls and handle multiple different events at the same break point:\r\n\r\n    mediany('(min-width: 500px)')\r\n        .handle('a', 'click', function (event) {})\r\n        .handle('button', 'click', function (event) {})\r\n        .handle('form', 'submit', function (event) {});\r\n\r\nTo handle multiple different media queries, you can make successive `mediany` calls:\r\n\r\n    mediany('(min-width: 1000px)').handle('a', 'click', function (event) {});\r\n    mediany('(max-height: 800px)').handle('a', 'click', function (event) {});\r\n\r\nUnlike CSS, handlers aren't overridden. So you can combine multiple handlers:\r\n\r\n    mediany('(min-width: 800px)').handle('a', 'click', function (event) {\r\n        lightboxLibrary.open();\r\n    });\r\n\r\n    mediany('(min-width: 1000px)').handle('a', 'click', function (event) {\r\n        lightboxLibrary.addHeadline();\r\n    });\r\n\r\nThe order in which they will fire will be determined by definition order: first in, first out.\r\n\r\nThis also means that if you want to prevent two handlers from firing at the same time, you need to ensure both min- and max:\r\n\r\n    mediany('(min-width: 800px) and (max-width: 999px)')\r\n        .handle('a', 'click', function (event) {});\r\n\r\n    mediany('(min-width: 1000px)').handle('a', 'click', function (event) {});\r\n\r\n## What it doesn't do\r\n\r\n* Tell you when moving from one breakpoint to another. You can look to [BreakJS](https://github.com/nygardk/BreakJS) or other tools for that.\r\n* Anything useful in Node.JS environments. This library is only really useful in browsers.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}